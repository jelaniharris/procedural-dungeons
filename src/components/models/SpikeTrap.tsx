/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\public\models\traps\trap.glb -t 
*/

import { useStore } from '@/stores/useStore';
import { useAnimations, useGLTF } from '@react-three/drei';
import { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import useGameObject from '../entities/useGameObject';
import useGameObjectEvent from '../entities/useGameObjectEvent';
import { OnTickEvent, PLAYER_DAMAGED_TRAP } from '../types/EventTypes';
import { Hazard } from '../types/GameTypes';
import useGame from '../useGame';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    trap_1: THREE.Mesh;
    spikes: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type SpikeTrapProps = JSX.IntrinsicElements['group'] & {
  data: Hazard;
};

type ActionName = 'show' | 'hide' | 'show-hide';

export function SpikeTrap(props: SpikeTrapProps) {
  const groupRef = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    '/models/traps/trap.glb'
  ) as GLTFResult;
  const [animation, setAnimation] = useState<ActionName>('hide');
  const { actions, mixer } = useAnimations(animations, groupRef);
  const currentLevel = useStore((state) => state.currentLevel);
  const currentPhase = useRef(
    currentLevel >= 2 ? Math.floor(Math.random() * 3) : 2
  );
  const maxPhase = 2;
  const isActive = useRef(false);
  const {} = useGameObject();
  const { publish } = useGame();
  const addLocationsToDangerZones = useStore(
    (state) => state.addLocationsToDangerZones
  );
  const playerInDamageZone = useStore((state) => state.playerInDamageZone);

  useGameObjectEvent<OnTickEvent>('on-tick', () => {
    if (isActive.current) {
      isActive.current = false;
      setAnimation('hide');
      currentPhase.current = maxPhase;
    } else {
      currentPhase.current -= 1;

      // Phase before trigger = give the player a warning
      if (currentPhase.current == 1) {
        addLocationsToDangerZones([props.data.worldPosition]);
      }

      if (currentPhase.current <= 0) {
        // Spike is active, do damage if the player is on top of me
        isActive.current = true;
        setAnimation('show');
        if (playerInDamageZone([props.data.worldPosition])) {
          publish(PLAYER_DAMAGED_TRAP, { hazard: props.data });
        }
      }
    }
  });

  /*useEffect(() => {
    if (isActive.current) {
      setAnimation('show');
    } else {
      setAnimation('hide');
    }
  }, [isActive.current]);*/

  useEffect(() => {
    if (actions && animation && actions[animation]) {
      const clipAction = actions[animation];
      if (clipAction) {
        clipAction.reset();
        mixer.stopAllAction();
        clipAction.clampWhenFinished = true;
        clipAction.setLoop(THREE.LoopOnce, 1);
        clipAction.play();
      }
    }

    //actions[animation]?.setLoop(THREE.LoopOnce, 1).play();
  }, [actions, animation, mixer]);

  return (
    <group ref={groupRef} name="trap">
      <mesh
        name="trap_1"
        geometry={nodes.trap_1.geometry}
        material={materials.colormap}
      >
        <mesh
          name="spikes"
          geometry={nodes.spikes.geometry}
          material={materials.colormap}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload('/models/traps/trap.glb');
