/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./public/coin.glb -t 
*/

import * as THREE from 'three';
import React, {
  forwardRef,
  useImperativeHandle,
  useRef,
  useState,
} from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ThreeElements, useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    coin: THREE.Mesh;
  };
  materials: {
    yellow: THREE.MeshStandardMaterial;
  };
};

export const Coin = forwardRef(function Coin(
  props: ThreeElements['group'],
  forwardedRef
) {
  const [visible] = useState(true);
  const { nodes, materials } = useGLTF('/coin.glb') as GLTFResult;
  const myRef = useRef<THREE.Group>(null);
  useImperativeHandle(forwardedRef, () => myRef.current);

  useFrame(() => {
    if (myRef && myRef.current && myRef.current.rotation) {
      myRef.current.rotation.y += 0.03;
    }
  });

  return (
    <group {...props} ref={myRef} dispose={null}>
      {visible && (
        <mesh geometry={nodes.coin.geometry} material={materials.yellow} />
      )}
    </group>
  );
});

useGLTF.preload('/coin.glb');
