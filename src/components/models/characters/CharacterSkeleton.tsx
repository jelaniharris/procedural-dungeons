/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\public\models\characters\character-skeleton.glb -t 
*/

import { Enemy } from '@/components/types/GameTypes';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { forwardRef, useImperativeHandle, useMemo, useRef } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    ['leg-left']: THREE.Mesh;
    ['leg-right']: THREE.Mesh;
    torso: THREE.Mesh;
    ['arm-left']: THREE.Mesh;
    ['arm-right']: THREE.Mesh;
    head: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
};

/*type ActionName = 'static' | 'idle' | 'walk' | 'sprint' | 'jump' | 'fall' | 'crouch' | 'sit' | 'drive' | 'die' | 'pick-up' | 'emote-yes' | 'emote-no' | 'holding-right' | 'holding-left' | 'holding-both' | 'holding-right-shoot' | 'holding-left-shoot' | 'holding-both-shoot' | 'attack-melee-right' | 'attack-melee-left' | 'attack-kick-right' | 'attack-kick-left' | 'interact-right' | 'interact-left'
type GLTFActions = Record<ActionName, THREE.AnimationAction>*/

//type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

interface SkeletonProps {
  enemy: Enemy;
  enemyId: number;
}

export const Skeleton = forwardRef(function Orc(
  props: JSX.IntrinsicElements['group'] & SkeletonProps,
  forwardedRef
) {
  const position = useMemo(() => props.position, []);

  const skeleton = useRef<THREE.Group>(null);
  useImperativeHandle(forwardedRef, () => skeleton.current);
  const { nodes, materials /*, animations*/ } = useGLTF(
    '/models/characters/character-skeleton.glb'
  ) as GLTFResult;
  //const { actions } = useAnimations<GLTFActions>(animations, group)

  const MovementSpeed = 0.32;

  useFrame(() => {
    if (!skeleton || !skeleton.current || !props.position) {
      return;
    }
    const propsPosition = props.position as THREE.Vector3;
    if (skeleton.current?.position.distanceTo(propsPosition) > 0.2) {
      const direction = skeleton.current.position
        .clone()
        .sub(propsPosition)
        .normalize()
        .multiplyScalar(MovementSpeed);
      //orc.current?.position.lerp(props.position as THREE.Vector3, 0.2);
      skeleton.current.position.sub(direction);
      skeleton.current.lookAt(propsPosition);
      //setAnimation("walk")
    } else {
      // setAnimation("idle")
    }
  });

  return (
    <group ref={skeleton} {...props} position={position} dispose={null}>
      <group name="character-skeleton">
        <group name="character-skeleton_1">
          <group name="root">
            <mesh
              name="leg-left"
              geometry={nodes['leg-left'].geometry}
              material={materials.colormap}
              position={[0.074, 0.223, 0]}
              scale={0.858}
            />
            <mesh
              name="leg-right"
              geometry={nodes['leg-right'].geometry}
              material={materials.colormap}
              position={[-0.074, 0.223, 0]}
              scale={0.858}
            />
            <mesh
              name="torso"
              geometry={nodes.torso.geometry}
              material={materials.colormap}
              position={[0, 0.223, 0]}
            >
              <mesh
                name="arm-left"
                geometry={nodes['arm-left'].geometry}
                material={materials.colormap}
                position={[0.15, 0.225, 0.003]}
              />
              <mesh
                name="arm-right"
                geometry={nodes['arm-right'].geometry}
                material={materials.colormap}
                position={[-0.15, 0.225, 0.003]}
              />
              <mesh
                name="head"
                geometry={nodes.head.geometry}
                material={materials.colormap}
                position={[0, 0.26, 0]}
              />
            </mesh>
          </group>
        </group>
      </group>
    </group>
  );
});

useGLTF.preload('/models/characters/character-skeleton.glb');
