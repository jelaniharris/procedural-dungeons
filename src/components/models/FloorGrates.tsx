/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 .\public\models\traps\FloorGrates.glb -t 
*/

import { useStore } from '@/stores/useStore';
import { getEnemyTypeFromGasType } from '@/utils/hazardUtils';
import { useGLTF } from '@react-three/drei';
import { useRef } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import useGameObjectEvent from '../entities/useGameObjectEvent';
import { OnTickEvent, PLAYER_TOUCHED_ENEMY } from '../types/EventTypes';
import { DangerIndicator, Hazard } from '../types/GameTypes';
import useGame from '../useGame';

type GLTFResult = GLTF & {
  nodes: {
    floor010: THREE.Mesh;
    floor010_1: THREE.Mesh;
  };
  materials: {
    ColorMap: THREE.MeshStandardMaterial;
    TopGrate: THREE.MeshStandardMaterial;
  };
};

type FloorGratesProps = JSX.IntrinsicElements['group'] & {
  data: Hazard;
};

export function FloorGrates(props: FloorGratesProps) {
  const { nodes, materials } = useGLTF(
    '/models/traps/FloorGrates.glb'
  ) as GLTFResult;
  const currentLevel = useStore((state) => state.currentLevel);
  const maxPhase = 5;
  const currentPhase = useRef(
    currentLevel >= 2 ? Math.floor(Math.random() * 3) : 2
  );
  const isActive = useRef(false);
  const addLocationsToDangerZones = useStore(
    (state) => state.addLocationsToDangerZones
  );
  const { publish } = useGame();
  const spawnEnemy = useStore((state) => state.spawnEnemy);
  const playerInDamageZone = useStore((state) => state.playerInDamageZone);

  useGameObjectEvent<OnTickEvent>('on-tick', () => {
    if (isActive.current) {
      isActive.current = false;
      currentPhase.current = maxPhase;
    } else {
      currentPhase.current -= 1;

      // Phase before trigger = give the player a warning
      if (currentPhase.current === 1) {
        addLocationsToDangerZones(
          [props.data.worldPosition],
          DangerIndicator.STATUS_EFFECT
        );
      }

      if (currentPhase.current <= 0) {
        // Spike is active, do damage if the player is on top of me
        isActive.current = true;
        if (props.data.emitterGas) {
          const enemyType = getEnemyTypeFromGasType(props.data.emitterGas);
          const enemy = spawnEnemy({ ...props.data.worldPosition }, enemyType);
          if (playerInDamageZone([props.data.worldPosition])) {
            publish(PLAYER_TOUCHED_ENEMY, { enemy: enemy });
          }
        }
      }
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.floor010.geometry} material={materials.ColorMap} />
      <mesh
        geometry={nodes.floor010_1.geometry}
        material={materials.TopGrate}
      />
    </group>
  );
}

useGLTF.preload('/models/traps/FloorGrates.glb');
