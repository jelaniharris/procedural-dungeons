/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 .\public\models\environment\Door.glb -t 
*/

import { useAnimations, useGLTF } from '@react-three/drei';
import { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import useGameObjectEvent from '../entities/useGameObjectEvent';
import {
  DOOR_CLOSE,
  DOOR_OPEN,
  DoorCloseEvent,
  DoorOpenEvent,
  OnTickEvent,
} from '../types/EventTypes';
import { DoorStatus } from '../types/GameTypes';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    WoodenDoor: THREE.Mesh;
    DoorFrame: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

//type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>
type ActionName = 'Close' | 'Closed-Idle' | 'Open';

export default function Door(props: JSX.IntrinsicElements['group']) {
  const groupRef = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    '/models/environment/Door.glb'
  ) as GLTFResult;
  const [animation, setAnimation] = useState<ActionName>('Closed-Idle');
  const { actions, mixer } = useAnimations(animations, groupRef);
  const doorStatus = useRef<DoorStatus>(DoorStatus.CLOSED);
  const currentPhase = useRef(0);
  const maxPhase = 4;

  useGameObjectEvent<OnTickEvent>('on-tick', () => {
    if (doorStatus.current == DoorStatus.OPENED) {
      currentPhase.current -= 1;

      // Automatically close the door
      if (currentPhase.current <= 0) {
        setAnimation('Close');
        doorStatus.current = DoorStatus.CLOSED;
      }
    }
  });

  useGameObjectEvent<DoorOpenEvent>(DOOR_OPEN, () => {
    console.log('[Door] Got Trigger to Open');
    if (doorStatus.current == DoorStatus.CLOSED) {
      setAnimation('Open');
      doorStatus.current = DoorStatus.OPENED;
    }
    currentPhase.current = maxPhase;
  });

  useGameObjectEvent<DoorCloseEvent>(DOOR_CLOSE, () => {
    console.log('[Door] Got Trigger to Close');
    if (doorStatus.current == DoorStatus.OPENED) {
      setAnimation('Close');
      doorStatus.current = DoorStatus.CLOSED;
    }
  });

  useEffect(() => {
    if (actions && animation && actions[animation]) {
      const clipAction = actions[animation];
      if (clipAction) {
        clipAction.reset();
        mixer.stopAllAction();
        clipAction.clampWhenFinished = true;
        clipAction.setLoop(THREE.LoopOnce, 1);
        clipAction.play();
      }
    }

    //actions[animation]?.setLoop(THREE.LoopOnce, 1).play();
  }, [actions, animation, mixer]);

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <group name="Scene">
        <group name="Door">
          <mesh
            name="WoodenDoor"
            geometry={nodes.WoodenDoor.geometry}
            material={materials.colormap}
            position={[0, 0, 0.5]}
            rotation={[0, 1.396, 0]}
          />
          <mesh
            name="DoorFrame"
            geometry={nodes.DoorFrame.geometry}
            material={materials.colormap}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/environment/Door.glb');
