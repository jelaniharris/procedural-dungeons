/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 .\public\models\rooms\embark-room.glb -t 
*/

import { useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    floor: THREE.Mesh;
    floor001: THREE.Mesh;
    floor002: THREE.Mesh;
    floor003: THREE.Mesh;
    stairs: THREE.Mesh;
    ['wall-half']: THREE.Mesh;
    ['wall-half001']: THREE.Mesh;
    ['wall-half003']: THREE.Mesh;
    ['wall-half002']: THREE.Mesh;
    ['wall-half004']: THREE.Mesh;
    ['wall-half005']: THREE.Mesh;
    floor004: THREE.Mesh;
    floor005: THREE.Mesh;
    floor006: THREE.Mesh;
    floor007: THREE.Mesh;
    floor008: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
    ['colormap.001']: THREE.MeshStandardMaterial;
    ['colormap.002']: THREE.MeshStandardMaterial;
  };
};

export function EmbarkRoom(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    '/models/rooms/embark-room.glb'
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.floor.geometry}
        material={materials.colormap}
        position={[1, 0, -1]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor001.geometry}
        material={materials.colormap}
        position={[1, 0, -2]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor002.geometry}
        material={materials.colormap}
        position={[2, 0, -2]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor003.geometry}
        material={materials.colormap}
        position={[2, 0, -1]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.stairs.geometry}
        material={materials['colormap.001']}
        position={[0, 0, -1]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
      />
      <mesh
        geometry={nodes['wall-half'].geometry}
        material={materials['colormap.002']}
        position={[0, 0, -2]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
      />
      <mesh
        geometry={nodes['wall-half001'].geometry}
        material={materials['colormap.002']}
        position={[0, 0, -3]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
      />
      <mesh
        geometry={nodes['wall-half003'].geometry}
        material={materials['colormap.002']}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes['wall-half002'].geometry}
        material={materials['colormap.002']}
        position={[1, 0, 0]}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes['wall-half004'].geometry}
        material={materials['colormap.002']}
        position={[2, 0, 0]}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes['wall-half005'].geometry}
        material={materials['colormap.002']}
        position={[3, 0, 0]}
        rotation={[Math.PI / 2, 0, Math.PI]}
      />
      <mesh
        geometry={nodes.floor004.geometry}
        material={materials.colormap}
        position={[1, 0, -3]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor005.geometry}
        material={materials.colormap}
        position={[2, 0, -3]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor006.geometry}
        material={materials.colormap}
        position={[3, 0, -2]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor007.geometry}
        material={materials.colormap}
        position={[3, 0, -1]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes.floor008.geometry}
        material={materials.colormap}
        position={[3, 0, -3]}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload('/models/rooms/embark-room.glb');
