/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./public/models/items/chest.glb -t 
*/

import { useAnimations, useGLTF } from '@react-three/drei';
import { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import useGameObjectEvent from '../entities/useGameObjectEvent';
import { CONTAINER_OPEN, ContainerOpenEvent } from '../types/EventTypes';
import { ItemContainer, ItemContainerStatus } from '../types/GameTypes';

type ActionName = 'open' | 'close' | 'open-close';
//interface GLTFActions = Record<ActionName, THREE.AnimationAction>
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type ChestProps = JSX.IntrinsicElements['group'] & {
  container: ItemContainer;
};

type GLTFResult = GLTF & {
  nodes: {
    chest_1: THREE.Mesh;
    lid: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export default function Chest(props: ChestProps) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    '/models/items/chest.glb'
  ) as GLTFResult;
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState<ActionName>('close');
  const containerStatus = useRef<ItemContainerStatus>(
    ItemContainerStatus.CLOSED
  );

  useGameObjectEvent<ContainerOpenEvent>(CONTAINER_OPEN, () => {
    if (containerStatus.current == ItemContainerStatus.CLOSED) {
      setAnimation('open');
      containerStatus.current = ItemContainerStatus.OPEN;
    }
  });

  useEffect(() => {
    if (actions && animation && actions[animation]) {
      const clipAction = actions[animation];
      if (clipAction) {
        clipAction.reset();
        mixer.stopAllAction();
        clipAction.clampWhenFinished = true;
        clipAction.setLoop(THREE.LoopOnce, 1);
        clipAction.play();
      }
    }
  }, [actions, animation, mixer]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="chest">
        <mesh
          name="chest_1"
          geometry={nodes.chest_1.geometry}
          material={materials.colormap}
        >
          <mesh
            name="lid"
            geometry={nodes.lid.geometry}
            material={materials.colormap}
            position={[0, 0.2, -0.2]}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload('/models/items/chest.glb');
