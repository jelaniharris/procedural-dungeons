/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 .\public\models\items\chicken_leg.glb -t 
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    ChickenLeg_Cube010: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements['group']) {
  const myRef = useRef<THREE.Group>(null);
  const [visible] = useState(true);

  useFrame(() => {
    if (myRef && myRef.current && myRef.current.rotation) {
      myRef.current.rotation.y += 0.02;
    }
  });

  const { nodes, materials } = useGLTF(
    '/models/items/chicken_leg.glb'
  ) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      {visible && (
        <mesh
          geometry={nodes.ChickenLeg_Cube010.geometry}
          material={materials.colormap}
          position={[0, 0.102, 0]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.65}
        />
      )}
    </group>
  );
}

useGLTF.preload('/models/items/chicken_leg.glb');
