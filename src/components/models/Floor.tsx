/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./public/models/environment/floor.glb -t 
*/

import { useGLTF, useTexture } from '@react-three/drei';
import { useMemo } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    floor_1: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
};

interface FloorProps {
  variant?: number;
}

export default function Floor(
  props: JSX.IntrinsicElements['group'] & FloorProps
) {
  const { nodes, materials } = useGLTF(
    '/models/environment/floor.glb'
  ) as GLTFResult;
  const variationTexture = useTexture('/textures/variation-b.png');
  variationTexture.flipY = false; // for glTF models.
  //variationTexture.colorSpace = 'srgb';
  //variationTexture.name = 'colormap';
  //variationTexture.wrapS = THREE.RepeatWrapping;
  //variationTexture.wrapT = THREE.RepeatWrapping;

  const floorMaterial = useMemo(() => {
    if (props.variant && props.variant == 1) {
      const material = new THREE.MeshStandardMaterial().copy(
        materials.colormap
      );
      material.map = variationTexture;
      return material;
    } else {
      return materials.colormap;
    }
  }, [materials.colormap, props.variant, variationTexture]);

  console.log('Mat', floorMaterial, props.variant);

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.floor_1.geometry} material={floorMaterial}></mesh>
    </group>
  );
}

useGLTF.preload('/models/environment/floor.glb');
