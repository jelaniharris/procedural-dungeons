/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./public/character-human.glb -t 
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useGLTF, useKeyboardControls } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import Camera from './Camera';
import { useGameContext } from './context/GameContext';
import { useFrame } from '@react-three/fiber';
import { Group } from 'three';
import { Controls } from './types/GameTypes';
import { MathUtils } from 'three/src/math/MathUtils';

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh;
    mesh_0_1: THREE.Mesh;
    ['Mesh_arm-left_Instance']: THREE.Mesh;
    ['Mesh_arm-left_Instance_1']: THREE.Mesh;
    ['Mesh_arm-right_Instance']: THREE.Mesh;
    ['Mesh_arm-right_Instance_1']: THREE.Mesh;
    ['leg-left']: THREE.Mesh;
    ['leg-right']: THREE.Mesh;
    mesh_5: THREE.Mesh;
    mesh_5_1: THREE.Mesh;
    mesh_5_2: THREE.Mesh;
    mesh_5_3: THREE.Mesh;
  };
  materials: {
    grey: THREE.MeshStandardMaterial;
    brown: THREE.MeshStandardMaterial;
    beige: THREE.MeshStandardMaterial;
    dark: THREE.MeshStandardMaterial;
    ['default']: THREE.MeshStandardMaterial;
  };
};

export function CharacterHuman(props: JSX.IntrinsicElements['group']) {
  const human = useRef<Group>();
  const { playerData, adjustPlayer } = useGameContext();
  const [lastRotation, SetLastRotation] = useState(0);
  const [, get] = useKeyboardControls();
  const { forward } = get();

  const forwardPressed = useKeyboardControls<Controls>(
    (state) => state.forward
  );
  const rightPressed = useKeyboardControls<Controls>((state) => state.right);
  const leftPressed = useKeyboardControls<Controls>((state) => state.left);
  const downPressed = useKeyboardControls<Controls>((state) => state.back);

  console.log(forward);

  if (forwardPressed) {
    adjustPlayer(0, -1);
    //SetLastRotation(MathUtils.degToRad(0));
  } else if (downPressed) {
    adjustPlayer(0, 1);
    //SetLastRotation(MathUtils.degToRad(180));
  } else if (rightPressed) {
    adjustPlayer(1, 0);
    //SetLastRotation(MathUtils.degToRad(90));
  } else if (leftPressed) {
    adjustPlayer(-1, 0);
    //SetLastRotation(MathUtils.degToRad(270));
  }

  useFrame(() => {
    if (human.current) {
      human.current.position.x = playerData?.x || 0;
      human.current.position.y = 0;
      human.current.position.z = playerData?.y || 0;
      //[playerData?.x || 0, 0, playerData?.y || 0];

      human.current.rotation.z = lastRotation;
    }
  });

  const { nodes, materials } = useGLTF('/character-human.glb') as GLTFResult;

  return (
    <group {...props} dispose={null} ref={human}>
      <group position={[0, 0.176, 0]}>
        <mesh geometry={nodes.mesh_0.geometry} material={materials.grey} />
        <mesh geometry={nodes.mesh_0_1.geometry} material={materials.brown} />
        <group position={[-0.1, 0.112, -0.011]}>
          <mesh
            geometry={nodes['Mesh_arm-left_Instance'].geometry}
            material={materials.brown}
          />
          <mesh
            geometry={nodes['Mesh_arm-left_Instance_1'].geometry}
            material={materials.grey}
          />
        </group>
        <group position={[0.1, 0.112, -0.011]}>
          <mesh
            geometry={nodes['Mesh_arm-right_Instance'].geometry}
            material={materials.brown}
          />
          <mesh
            geometry={nodes['Mesh_arm-right_Instance_1'].geometry}
            material={materials.grey}
          />
        </group>
        <mesh
          geometry={nodes['leg-left'].geometry}
          material={materials.brown}
          position={[-0.084, 0, 0]}
        />
        <mesh
          geometry={nodes['leg-right'].geometry}
          material={materials.brown}
          position={[0.084, 0, 0]}
        />
        <group position={[0, 0.167, -0.026]}>
          <mesh geometry={nodes.mesh_5.geometry} material={materials.brown} />
          <mesh geometry={nodes.mesh_5_1.geometry} material={materials.beige} />
          <mesh geometry={nodes.mesh_5_2.geometry} material={materials.dark} />
          <mesh
            geometry={nodes.mesh_5_3.geometry}
            material={materials['default']}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/character-human.glb');
